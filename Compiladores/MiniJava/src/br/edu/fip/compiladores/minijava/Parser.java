
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Nov 11 00:42:31 GMT-03:00 2019
//----------------------------------------------------

package br.edu.fip.compiladores.minijava;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Nov 11 00:42:31 GMT-03:00 2019
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\075\000\002\002\004\000\002\002\004\000\002\003" +
    "\021\000\002\021\004\000\002\021\002\000\002\004\011" +
    "\000\002\022\004\000\002\022\002\000\002\023\004\000" +
    "\002\023\002\000\002\005\005\000\002\024\004\000\002" +
    "\024\002\000\002\006\017\000\002\025\003\000\002\025" +
    "\002\000\002\026\004\000\002\026\002\000\002\007\005" +
    "\000\002\027\006\000\002\027\002\000\002\010\005\000" +
    "\002\010\003\000\002\010\003\000\002\011\005\000\002" +
    "\011\007\000\002\011\007\000\002\011\007\000\002\011" +
    "\006\000\002\012\005\000\002\012\003\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\003\000" +
    "\002\014\005\000\002\014\005\000\002\014\003\000\002" +
    "\015\005\000\002\015\005\000\002\015\003\000\002\016" +
    "\004\000\002\016\004\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\007\000\002\016\005\000" +
    "\002\016\006\000\002\016\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\006\000\002\017\005\000\002\017" +
    "\005\000\002\017\010\000\002\030\003\000\002\030\002" +
    "\000\002\020\004\000\002\031\005\000\002\031\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\217\000\004\005\005\001\002\000\004\002\221\001" +
    "\002\000\004\027\203\001\002\000\006\002\ufffd\005\011" +
    "\001\002\000\006\002\ufffd\005\011\001\002\000\004\002" +
    "\000\001\002\000\004\027\012\001\002\000\006\006\013" +
    "\031\ufffa\001\002\000\004\027\201\001\002\000\004\031" +
    "\015\001\002\000\012\004\017\007\ufff8\015\021\032\ufff8" +
    "\001\002\000\004\027\177\001\002\000\004\027\uffeb\001" +
    "\002\000\006\007\030\032\ufff5\001\002\000\006\027\uffea" +
    "\033\024\001\002\000\026\004\017\007\ufff8\014\ufff8\015" +
    "\021\016\ufff8\020\ufff8\021\ufff8\027\ufff8\031\ufff8\032\ufff8" +
    "\001\002\000\022\007\ufff9\014\ufff9\016\ufff9\020\ufff9\021" +
    "\ufff9\027\ufff9\031\ufff9\032\ufff9\001\002\000\004\034\025" +
    "\001\002\000\004\027\uffec\001\002\000\004\032\176\001" +
    "\002\000\006\007\030\032\ufff5\001\002\000\006\004\017" +
    "\015\021\001\002\000\004\027\032\001\002\000\004\035" +
    "\033\001\002\000\010\004\017\015\021\036\ufff2\001\002" +
    "\000\004\027\167\001\002\000\004\036\037\001\002\000" +
    "\004\036\ufff3\001\002\000\004\031\040\001\002\000\022" +
    "\004\017\014\ufff8\015\021\016\ufff8\020\ufff8\021\ufff8\027" +
    "\ufff8\031\ufff8\001\002\000\016\014\ufff0\016\050\020\046" +
    "\021\047\027\042\031\045\001\002\000\004\042\164\001" +
    "\002\000\020\014\ufff0\016\050\020\046\021\047\027\042" +
    "\031\045\032\ufff0\001\002\000\004\014\157\001\002\000" +
    "\016\016\050\020\046\021\047\027\042\031\045\032\ufff0" +
    "\001\002\000\004\035\151\001\002\000\004\035\145\001" +
    "\002\000\004\035\051\001\002\000\024\023\056\024\063" +
    "\025\067\026\054\027\065\030\052\035\061\047\062\053" +
    "\060\001\002\000\032\034\uffd4\036\uffd4\037\uffd4\041\uffd4" +
    "\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4\051" +
    "\uffd4\052\uffd4\001\002\000\032\034\uffd9\036\uffd9\037\uffd9" +
    "\041\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9\050" +
    "\uffd9\051\uffd9\052\uffd9\001\002\000\006\015\137\027\136" +
    "\001\002\000\022\034\uffe3\036\uffe3\037\uffe3\041\uffe3\043" +
    "\074\044\075\045\076\052\uffe3\001\002\000\032\034\uffd6" +
    "\036\uffd6\037\uffd6\041\uffd6\043\uffd6\044\uffd6\045\uffd6\046" +
    "\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\001\002\000\036" +
    "\033\117\034\uffd0\036\uffd0\037\uffd0\040\120\041\uffd0\043" +
    "\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0" +
    "\052\uffd0\001\002\000\024\023\056\024\063\025\067\026" +
    "\054\027\065\030\052\035\061\047\062\053\060\001\002" +
    "\000\024\023\056\024\063\025\067\026\054\027\065\030" +
    "\052\035\061\047\062\053\060\001\002\000\024\023\056" +
    "\024\063\025\067\026\054\027\065\030\052\035\061\047" +
    "\062\053\060\001\002\000\032\034\uffd5\036\uffd5\037\uffd5" +
    "\041\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\050" +
    "\uffd5\051\uffd5\052\uffd5\001\002\000\032\034\uffdc\036\uffdc" +
    "\037\uffdc\041\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc\047" +
    "\uffdc\050\104\051\103\052\uffdc\001\002\000\036\033\uffcf" +
    "\034\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\043\uffcf\044" +
    "\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf" +
    "\001\002\000\026\034\uffdf\036\uffdf\037\uffdf\041\uffdf\043" +
    "\uffdf\044\uffdf\045\uffdf\046\100\047\101\052\uffdf\001\002" +
    "\000\036\033\uffce\034\uffce\036\uffce\037\uffce\040\uffce\041" +
    "\uffce\043\uffce\044\uffce\045\uffce\046\uffce\047\uffce\050\uffce" +
    "\051\uffce\052\uffce\001\002\000\006\036\071\052\072\001" +
    "\002\000\014\016\050\020\046\021\047\027\042\031\045" +
    "\001\002\000\024\023\056\024\063\025\067\026\054\027" +
    "\065\030\052\035\061\047\062\053\060\001\002\000\022" +
    "\034\uffe4\036\uffe4\037\uffe4\041\uffe4\043\074\044\075\045" +
    "\076\052\uffe4\001\002\000\024\023\056\024\063\025\067" +
    "\026\054\027\065\030\052\035\061\047\062\053\060\001" +
    "\002\000\024\023\056\024\063\025\067\026\054\027\065" +
    "\030\052\035\061\047\062\053\060\001\002\000\024\023" +
    "\056\024\063\025\067\026\054\027\065\030\052\035\061" +
    "\047\062\053\060\001\002\000\026\034\uffe0\036\uffe0\037" +
    "\uffe0\041\uffe0\043\uffe0\044\uffe0\045\uffe0\046\100\047\101" +
    "\052\uffe0\001\002\000\024\023\056\024\063\025\067\026" +
    "\054\027\065\030\052\035\061\047\062\053\060\001\002" +
    "\000\024\023\056\024\063\025\067\026\054\027\065\030" +
    "\052\035\061\047\062\053\060\001\002\000\032\034\uffdd" +
    "\036\uffdd\037\uffdd\041\uffdd\043\uffdd\044\uffdd\045\uffdd\046" +
    "\uffdd\047\uffdd\050\104\051\103\052\uffdd\001\002\000\024" +
    "\023\056\024\063\025\067\026\054\027\065\030\052\035" +
    "\061\047\062\053\060\001\002\000\024\023\056\024\063" +
    "\025\067\026\054\027\065\030\052\035\061\047\062\053" +
    "\060\001\002\000\032\034\uffdb\036\uffdb\037\uffdb\041\uffdb" +
    "\043\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb\051" +
    "\uffdb\052\uffdb\001\002\000\032\034\uffda\036\uffda\037\uffda" +
    "\041\uffda\043\uffda\044\uffda\045\uffda\046\uffda\047\uffda\050" +
    "\uffda\051\uffda\052\uffda\001\002\000\032\034\uffde\036\uffde" +
    "\037\uffde\041\uffde\043\uffde\044\uffde\045\uffde\046\uffde\047" +
    "\uffde\050\104\051\103\052\uffde\001\002\000\026\034\uffe1" +
    "\036\uffe1\037\uffe1\041\uffe1\043\uffe1\044\uffe1\045\uffe1\046" +
    "\100\047\101\052\uffe1\001\002\000\026\034\uffe2\036\uffe2" +
    "\037\uffe2\041\uffe2\043\uffe2\044\uffe2\045\uffe2\046\100\047" +
    "\101\052\uffe2\001\002\000\020\014\uffe8\016\uffe8\020\uffe8" +
    "\021\uffe8\027\uffe8\031\uffe8\032\uffe8\001\002\000\032\034" +
    "\uffd7\036\uffd7\037\uffd7\041\uffd7\043\uffd7\044\uffd7\045\uffd7" +
    "\046\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7\001\002\000" +
    "\006\036\115\052\072\001\002\000\036\033\uffcc\034\uffcc" +
    "\036\uffcc\037\uffcc\040\uffcc\041\uffcc\043\uffcc\044\uffcc\045" +
    "\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc\001\002" +
    "\000\032\034\uffd8\036\uffd8\037\uffd8\041\uffd8\043\uffd8\044" +
    "\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8" +
    "\001\002\000\024\023\056\024\063\025\067\026\054\027" +
    "\065\030\052\035\061\047\062\053\060\001\002\000\006" +
    "\022\122\027\121\001\002\000\040\033\uffcb\034\uffcb\035" +
    "\123\036\uffcb\037\uffcb\040\uffcb\041\uffcb\043\uffcb\044\uffcb" +
    "\045\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb\001" +
    "\002\000\032\034\uffd2\036\uffd2\037\uffd2\041\uffd2\043\uffd2" +
    "\044\uffd2\045\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2\052" +
    "\uffd2\001\002\000\026\023\056\024\063\025\067\026\054" +
    "\027\065\030\052\035\061\036\uffc8\047\062\053\060\001" +
    "\002\000\004\036\133\001\002\000\004\036\uffc9\001\002" +
    "\000\010\036\uffc5\041\130\052\072\001\002\000\004\036" +
    "\uffc7\001\002\000\024\023\056\024\063\025\067\026\054" +
    "\027\065\030\052\035\061\047\062\053\060\001\002\000" +
    "\010\036\uffc5\041\130\052\072\001\002\000\004\036\uffc6" +
    "\001\002\000\036\033\uffca\034\uffca\036\uffca\037\uffca\040" +
    "\uffca\041\uffca\043\uffca\044\uffca\045\uffca\046\uffca\047\uffca" +
    "\050\uffca\051\uffca\052\uffca\001\002\000\006\034\135\052" +
    "\072\001\002\000\032\034\uffd1\036\uffd1\037\uffd1\041\uffd1" +
    "\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1\051" +
    "\uffd1\052\uffd1\001\002\000\004\035\143\001\002\000\004" +
    "\033\140\001\002\000\024\023\056\024\063\025\067\026" +
    "\054\027\065\030\052\035\061\047\062\053\060\001\002" +
    "\000\006\034\142\052\072\001\002\000\032\034\uffd3\036" +
    "\uffd3\037\uffd3\041\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3" +
    "\047\uffd3\050\uffd3\051\uffd3\052\uffd3\001\002\000\004\036" +
    "\144\001\002\000\036\033\uffcd\034\uffcd\036\uffcd\037\uffcd" +
    "\040\uffcd\041\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047" +
    "\uffcd\050\uffcd\051\uffcd\052\uffcd\001\002\000\024\023\056" +
    "\024\063\025\067\026\054\027\065\030\052\035\061\047" +
    "\062\053\060\001\002\000\006\036\147\052\072\001\002" +
    "\000\004\037\150\001\002\000\020\014\uffe6\016\uffe6\020" +
    "\uffe6\021\uffe6\027\uffe6\031\uffe6\032\uffe6\001\002\000\024" +
    "\023\056\024\063\025\067\026\054\027\065\030\052\035" +
    "\061\047\062\053\060\001\002\000\006\036\153\052\072" +
    "\001\002\000\014\016\050\020\046\021\047\027\042\031" +
    "\045\001\002\000\020\014\uffe7\016\uffe7\020\uffe7\021\uffe7" +
    "\027\uffe7\031\uffe7\032\uffe7\001\002\000\004\032\156\001" +
    "\002\000\020\014\uffe9\016\uffe9\020\uffe9\021\uffe9\027\uffe9" +
    "\031\uffe9\032\uffe9\001\002\000\024\023\056\024\063\025" +
    "\067\026\054\027\065\030\052\035\061\047\062\053\060" +
    "\001\002\000\006\037\161\052\072\001\002\000\004\032" +
    "\162\001\002\000\006\007\ufff4\032\ufff4\001\002\000\006" +
    "\014\ufff1\032\ufff1\001\002\000\024\023\056\024\063\025" +
    "\067\026\054\027\065\030\052\035\061\047\062\053\060" +
    "\001\002\000\006\037\166\052\072\001\002\000\020\014" +
    "\uffe5\016\uffe5\020\uffe5\021\uffe5\027\uffe5\031\uffe5\032\uffe5" +
    "\001\002\000\006\036\uffed\041\171\001\002\000\004\036" +
    "\uffef\001\002\000\006\004\017\015\021\001\002\000\004" +
    "\027\173\001\002\000\006\036\uffed\041\171\001\002\000" +
    "\004\036\uffee\001\002\000\004\032\ufff6\001\002\000\006" +
    "\002\ufffc\005\ufffc\001\002\000\004\037\200\001\002\000" +
    "\026\004\ufff7\007\ufff7\014\ufff7\015\ufff7\016\ufff7\020\ufff7" +
    "\021\ufff7\027\ufff7\031\ufff7\032\ufff7\001\002\000\004\031" +
    "\ufffb\001\002\000\004\002\ufffe\001\002\000\004\031\204" +
    "\001\002\000\004\007\205\001\002\000\004\010\206\001" +
    "\002\000\004\011\207\001\002\000\004\012\210\001\002" +
    "\000\004\035\211\001\002\000\004\013\212\001\002\000" +
    "\004\033\213\001\002\000\004\034\214\001\002\000\004" +
    "\027\215\001\002\000\004\036\216\001\002\000\014\016" +
    "\050\020\046\021\047\027\042\031\045\001\002\000\004" +
    "\032\220\001\002\000\006\002\uffff\005\uffff\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\217\000\006\002\003\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\006\021\007\001\001" +
    "\000\006\004\006\021\201\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\021\010\015\023\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\026" +
    "\024\025\001\001\000\002\001\001\000\010\005\021\010" +
    "\015\023\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\026\024" +
    "\174\001\001\000\004\010\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\035\010\033\025\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\021\010\015\023\040\001" +
    "\001\000\006\011\042\026\043\001\001\000\002\001\001" +
    "\000\006\011\042\026\162\001\001\000\002\001\001\000" +
    "\006\011\042\026\154\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\012\067\013\054\014" +
    "\065\015\063\016\052\017\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\016\115\017\056" +
    "\001\001\000\016\012\113\013\054\014\065\015\063\016" +
    "\052\017\056\001\001\000\006\016\112\017\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\111\001\001\000\014\013\072\014\065\015\063\016" +
    "\052\017\056\001\001\000\002\001\001\000\012\014\110" +
    "\015\063\016\052\017\056\001\001\000\012\014\107\015" +
    "\063\016\052\017\056\001\001\000\012\014\076\015\063" +
    "\016\052\017\056\001\001\000\002\001\001\000\010\015" +
    "\106\016\052\017\056\001\001\000\010\015\101\016\052" +
    "\017\056\001\001\000\002\001\001\000\006\016\105\017" +
    "\056\001\001\000\006\016\104\017\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\012\133\013\054\014\065\015\063\016\052\017\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\012\125\013\054\014\065\015\063\016\052" +
    "\017\056\020\124\030\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\126\001\001\000\002\001\001" +
    "\000\016\012\130\013\054\014\065\015\063\016\052\017" +
    "\056\001\001\000\004\031\131\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\012\140\013\054" +
    "\014\065\015\063\016\052\017\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\012\145\013\054\014\065\015\063\016\052\017" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\012\151\013\054\014\065\015\063\016" +
    "\052\017\056\001\001\000\002\001\001\000\004\011\153" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\012\157\013\054\014\065\015\063\016\052" +
    "\017\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\012\164\013\054" +
    "\014\065\015\063\016\052\017\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\167\001\001\000\002" +
    "\001\001\000\004\010\171\001\001\000\002\001\001\000" +
    "\004\027\173\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\216\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // _I_ ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_I_",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // _I_ ::= VIRGULA _EXP_ _I_ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_I_",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // _EXPS_ ::= _EXP_ _I_ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_EXPS_",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // _H_ ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_H_",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // _H_ ::= _EXPS_ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_H_",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // _PEXP_ ::= _PEXP_ PONTO ID PARENTESES_ESQUERDA _H_ PARENTESES_DIREITA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_PEXP_",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // _PEXP_ ::= _PEXP_ PONTO ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_PEXP_",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // _PEXP_ ::= PARENTESES_ESQUERDA _EXP_ PARENTESES_DIREITA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_PEXP_",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // _PEXP_ ::= NEW ID PARENTESES_ESQUERDA PARENTESES_DIREITA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_PEXP_",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // _PEXP_ ::= THIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_PEXP_",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // _PEXP_ ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_PEXP_",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // _SEXP_ ::= _PEXP_ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_SEXP_",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // _SEXP_ ::= _PEXP_ COLCHETE_ESQUERDA _EXP_ COLCHETE_DIREITA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_SEXP_",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // _SEXP_ ::= _PEXP_ PONTO LENGTH 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_SEXP_",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // _SEXP_ ::= NEW INT COLCHETE_ESQUERDA _EXP_ COLCHETE_DIREITA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_SEXP_",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // _SEXP_ ::= NUM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_SEXP_",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // _SEXP_ ::= FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_SEXP_",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // _SEXP_ ::= TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_SEXP_",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // _SEXP_ ::= SUBTRACAO _SEXP_ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_SEXP_",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // _SEXP_ ::= EXCLAMACAO _SEXP_ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_SEXP_",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // _MEXP_ ::= _SEXP_ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_MEXP_",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // _MEXP_ ::= _MEXP_ DIVISAO _SEXP_ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_MEXP_",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // _MEXP_ ::= _MEXP_ MULTIPLICACAO _SEXP_ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_MEXP_",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // _AEXP_ ::= _MEXP_ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_AEXP_",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // _AEXP_ ::= _AEXP_ SUBTRACAO _MEXP_ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_AEXP_",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // _AEXP_ ::= _AEXP_ ADICAO _MEXP_ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_AEXP_",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // _REXP_ ::= _AEXP_ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_REXP_",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // _REXP_ ::= _REXP_ EXCLAMACAO_IGUAL _AEXP_ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_REXP_",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // _REXP_ ::= _REXP_ IGUAL_IGUAL _AEXP_ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_REXP_",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // _REXP_ ::= _REXP_ MENOR_QUE _AEXP_ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_REXP_",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // _EXP_ ::= _REXP_ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_EXP_",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // _EXP_ ::= _EXP_ AND _REXP_ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_EXP_",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // _CMD_ ::= ID IGUAL _EXP_ PONTO_E_VIRGULA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_CMD_",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // _CMD_ ::= SYSTEM_OUT_PRINTLN PARENTESES_ESQUERDA _EXP_ PARENTESES_DIREITA PONTO_E_VIRGULA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_CMD_",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // _CMD_ ::= WHILE PARENTESES_ESQUERDA _EXP_ PARENTESES_DIREITA _CMD_ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_CMD_",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // _CMD_ ::= IF PARENTESES_ESQUERDA _EXP_ PARENTESES_DIREITA _CMD_ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_CMD_",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // _CMD_ ::= CHAVE_ESQUERDA _F_ CHAVE_DIREITA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_CMD_",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // _TIPO_ ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_TIPO_",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // _TIPO_ ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_TIPO_",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // _TIPO_ ::= INT COLCHETE_ESQUERDA COLCHETE_DIREITA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_TIPO_",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // _G_ ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_G_",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // _G_ ::= VIRGULA _TIPO_ ID _G_ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_G_",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // _PARAMS_ ::= _TIPO_ ID _G_ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_PARAMS_",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // _F_ ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_F_",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // _F_ ::= _CMD_ _F_ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_F_",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // _E_ ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_E_",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // _E_ ::= _PARAMS_ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_E_",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // _METODO_ ::= PUBLIC _TIPO_ ID PARENTESES_ESQUERDA _E_ PARENTESES_DIREITA CHAVE_ESQUERDA _C_ _F_ RETURN _EXP_ PONTO_E_VIRGULA CHAVE_DIREITA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_METODO_",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // _D_ ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_D_",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // _D_ ::= _METODO_ _D_ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_D_",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // _VAR_ ::= _TIPO_ ID PONTO_E_VIRGULA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_VAR_",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // _C_ ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_C_",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // _C_ ::= _VAR_ _C_ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_C_",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // _B_ ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_B_",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // _B_ ::= EXTENDS ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_B_",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // _CLASSE_ ::= CLASS ID _B_ CHAVE_ESQUERDA _C_ _D_ CHAVE_DIREITA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_CLASSE_",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // _A_ ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_A_",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // _A_ ::= _CLASSE_ _A_ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_A_",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // _MAIN_ ::= CLASS ID CHAVE_ESQUERDA PUBLIC STATIC VOID MAIN PARENTESES_ESQUERDA STRING COLCHETE_ESQUERDA COLCHETE_DIREITA ID PARENTESES_DIREITA _CMD_ CHAVE_DIREITA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_MAIN_",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // _PROG_ ::= _MAIN_ _A_ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_PROG_",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= _PROG_ EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

